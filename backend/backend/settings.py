"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-87v-32+3b*67-&dumd)*m4o161-%ld$k)d&$bmm95vo9tbkqvk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Django Apps
    'django.contrib.admin',  # Админка Django
    'django.contrib.auth',  # Аутентификация
    'django.contrib.contenttypes',  # Модели контента
    'django.contrib.sessions',  # Сессии
    'django.contrib.messages',  # Сообщения
    'django.contrib.staticfiles',  # Статические файлы
    # DRF
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',  # Опционально, для черного списка токенов
    'corsheaders',  # Добавляем corsheaders в INSTALLED_APPS

    'django_filters',  # Для фильтрации данных в API
    'drf_yasg',  # Для генерации документации OpenAPI
    # Приложения
    'shop',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Включаем CORS middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

CORS_ALLOW_ALL_ORIGINS = True  # Разрешить доступ с любых доменов (не рекомендуется для продакшн)

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # Разрешаем доступ с localhost (например, если фронтенд работает на порту 3000)
    # 'https://your-frontend-domain.com',  # Разрешаем доступ с другого домена (например, на продакшн-сервере)
]


# CORS_ALLOW_METHODS = [
#     'GET',
#     'POST',
#     'OPTIONS',
#     'PUT',
#     'PATCH',
#     'DELETE',
# ]

# Настройка DRF для использования JWT аутентификации
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Использование JWT
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Только для авторизованных пользователей
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # Пагинация по номеру страницы
    'PAGE_SIZE': 8,  # Количество элементов на странице (например, 10 товаров)
}



# Настройки для SimpleJWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Время жизни access токена (например, 15 минут)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Время жизни refresh токена (например, 1 день)
    'BLACKLIST_AFTER_ROTATION': True,
    'ROTATE_REFRESH_TOKENS': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    # 'ROTATE_REFRESH_TOKENS': False,  # Не разрешаем обновление refresh токенов (если включено, refresh токен меняется каждый раз)
    # 'BLACKLIST_AFTER_ROTATION': True,  # Добавляем refresh токены в черный список после обновления
    # 'ALGORITHM': 'HS256',  # Алгоритм для подписи токенов
    # 'SIGNING_KEY': SECRET_KEY,  # Секретный ключ для подписи токенов, по умолчанию используется SECRET_KEY из settings.py
    # 'VERIFYING_KEY': None,  # Указываем, если есть внешний ключ для проверки подписи токенов
    # 'AUDIENCE': None,  # Опционально: если используется Audience для проверки
    # 'ISSUER': None,  # Опционально: если используется Issuer для проверки
}




TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')